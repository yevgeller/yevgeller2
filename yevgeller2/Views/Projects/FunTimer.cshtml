
@{
    ViewBag.Title = "FunTimer";
}

<h2>Track your work time vs time spent slacking off.</h2>
<div>Data is only stored in this page and not sent anywhere unless you're an authorized user. If you leave this page, nothing is saved. The local time is: <span id="localTime" style="font-weight:bold"></span></div>
<div class="voffset20">
    <button id="startWork" onclick="startWork()" class="btn btn-success">Start tracking work (and stop tracking fun)</button>
</div>
<div class="voffset20">
    <button id="startFun" onclick="startFun()" class="btn btn-info">Track fun (and stop tracking work)</button>
</div>
<div class="voffset50">
    <button id="resetButton" onclick="resetTimers()" class="btn btn-warning">Reset timers (and track nothing)</button>
</div>

<div id="time2" style="color:green" class="voffset20"></div>
<div id="result" class="voffset20"></div>
<div id="summary" class="voffset50"></div>

@section scripts
{
    <script type="text/javascript">
        var timer;
        var record = initEmptyRecord();
        var records = [];
        var totalSeconds;

        $(document).ready(function () {
            setInterval(function () {
                document.getElementById("localTime").innerHTML = (new Date()).toLocaleTimeString();
            })
        });

        function startTimer() {
            clearInterval(timer);
            totalSeconds = 0;
            timer = setInterval(function () {
                totalSeconds++;
                var t = document.getElementById("time2");
                var text = "Have been ";
                if (record.rType == "Work") {
                    text += "working";
                } else if (record.rType == "Fun") {
                    text += "slacking off";
                } else {
                    text += "doing something else";
                }
                text += " for " + convertSecondsIntoTimerString(totalSeconds);
                t.innerHTML = text;
            }, 1000);
        }

        function convertSecondsIntoTimerString(numberOfSeconds) {
            var result = "";

            var hours = Math.floor(numberOfSeconds / 3600);
            if (hours > 0) { result += hours + " h "; }

            var minutes = Math.floor((numberOfSeconds - (hours * 3600)) / 60);
            if (minutes > 0) { result += minutes + " m "; }

            result += (numberOfSeconds % 60 + " s");

            return result;
        }

        function initEmptyRecord() {
            var ret = {};
            ret.rType = "";
            ret.start = new Date(0);
            ret.end = new Date(0);
            ret.durationString = "";
            ret.durationSeconds = 0;
            return ret;
        }

        function startWork() {
            $("#startWork").prop("disabled", true);
            $('#startFun').prop("disabled", false);
            processRecord("Work");
        }

        function startFun() {
            $("#startWork").prop("disabled", false);
            $('#startFun').prop("disabled", true);
            processRecord("Fun");
        }

        function displayRecords() {
            var workSeconds = 0;
            var funSeconds = 0;

            var result = "";
            for (var i = 0; i < records.length; i++) {
                if (records[i].rType == "Work") { workSeconds += records[i].durationSeconds; }
                else if (records[i].rType == "Fun") { funSeconds += records[i].durationSeconds; }
                var startDt = new Date(records[i].start);
                var endDt = new Date(records[i].end); //need to make dates a little more pretty
                result += startDt.toLocaleTimeString() + "-" + endDt.toLocaleTimeString() +
                    "; " + records[i].rType + " for " + records[i].durationString + "\n";
            }
            document.getElementById("result").innerText = result;
            if (records.length > 1) {
                result = "Historic records show that so far " +
                    convertSecondsIntoTimerString(workSeconds) + " were spent working while " +
                    convertSecondsIntoTimerString(funSeconds) + " were spent slacking off."

                document.getElementById("summary").innerText = result;
            }
        }

        function processRecord(recType) {
            if (recordIsEmpty() == false) {
                finalizeRecord();
                record = initEmptyRecord();
                record.rType = recType;
                record.start = new Date();
            } else { //just starting
                record.rType = recType;
                record.start = new Date();
            }
            startTimer();
            displayRecords();
        }

        function recordIsEmpty() {
            var thisYear = (new Date()).getFullYear();
            var recordsStartYear = (new Date(record.start)).getFullYear();
            return recordsStartYear < thisYear;
        }

        function finalizeRecord() {
            record.end = new Date();
            record.durationString = convertSecondsIntoTimerString(totalSeconds);
            record.durationSeconds = totalSeconds;
            records.push(record);
            var dto = {
                startDateTime: parseStringToTime(record.start),
                endDateTime: parseStringToTime(record.end),
                durationInSeconds: record.durationSeconds,
                recordType: record.rType
            };
            var recordUrl = "/api/projectsapi/recordActivityPeriod";
            $.post(recordUrl, dto); //.done(function () { }).fail(function () {}); --don't care
        }

        function parseStringToTime(inputString) {
            var d = new Date(inputString);

            return d.getFullYear() + "-" +
                padToTwoSymbols(d.getMonth() + 1) + "-" +
                padToTwoSymbols(d.getDate()) + " " +
                padToTwoSymbols(d.getHours()) + ":" +
                padToTwoSymbols(d.getMinutes()) + ":" +
                padToTwoSymbols(d.getSeconds());
        }

        function padToTwoSymbols(inputValue) {
            if (inputValue < 10) {
                return "0" + inputValue;
            } else {
                return inputValue;
            }
        }

        function resetTimers() {
            if (recordIsEmpty() == false) {
                finalizeRecord();
                displayRecords();
            }
            record = initEmptyRecord();
            startTimer();
            $("#startWork").prop("disabled", false);
            $('#startFun').prop("disabled", false);

        }
    </script>
}
